---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALAnyState:any_state.yml
---
metadata:
  title: |
    Powers of Attorney
  short title: |
    Powers of Attorney
  authors:
    - Quinten Steenhuis
---
features:
  css: docassemble.ALToolbox:al_three_parts_date.css
---
mandatory: True
comment: |
  Global interview metadata
variable name: interview_metadata["mn_powers_of_attorney"]
data:
  al_weaver_version: "1.10.0a2"
  generated on: "2023-05-09"
  title: >-
    Powers of Attorney
  short title: >-
    Powers of Attorney
  description: |-
    This interview helps someone in Minnesota give Powers of Attorney to a trusted person.
  allowed courts: []
  categories: []
  typical role: "plaintiff"
  generate download screen: True
---
code: |
  interview_metadata['main_interview_key'] =  'mn_powers_of_attorney'
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MN"
---
code: |
  github_repo_name =  'docassemble-MnPowersOfAttorney'
---
code: |
  interview_short_title = "Give Powers of Attorney to a Trusted Person"
---
code: |
  al_form_type = "other_form" 
---
objects:
  - attorneys: ALPeopleList.using(there_are_any=True)
  - successor_attorneys: ALPeopleList
  - users: ALPeopleList.using(ask_number=True,target_number=1, complete_attribute=["name.first", "address.address"])
  - real_estate_items: DAList.using(object_type=DAObject, complete_attribute=["county","description"])
  - drafter: ALIndividual
---
sections:
  - section_intro: Getting started
  - section_qualifies: Can you give a Powers of Attorney?
  - section_user_information: Information about you
  - section_decision_makers: Your decision makers
  - section_powers: What your decision makers can do
  - section_limits: Limits
  - review_mn_powers_of_attorney: Review your answers
  - mn_powers_of_attorney_download: Download
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_mn_powers_of_attorney
code: |
  # Set the allowed courts for this interview
  nav.set_section("section_intro")
  user_role = "plaintiff"
  user_ask_role = "plaintiff"
  nav.set_section("section_qualifies")
  grantor_lives_in_minnesota
  if not (grantor_lives_in_minnesota and grantor_over_18 and grantor_competent):
    exit_cant_get_poa
  nav.set_section("section_user_information")
  if person_answering == "drafter":
    drafter.name.first
  users.gather()
  set_parts(subtitle=str(users))
  nav.set_section("section_decision_makers")
  decision_maker_signpost
  attorneys.gather()
  if attorneys.number() > 1:
    aif_acts_independently
  expiration_choice
  successor_attorneys.gather()
  set_progress(50)
  nav.set_section("section_powers")
  What_can_the_power_of_attorney_decide_for_you
  if power_real_estate and real_estate_limited:
    real_estate_items.gather()
  nav.set_section("section_limits")
  poa_expires
  What_limits_will_the_power_of_attorney_have
  set_progress(90)
  interview_order_mn_powers_of_attorney = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  mn_powers_of_attorney_intro
  interview_order_mn_powers_of_attorney
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  nav.set_section("review_mn_powers_of_attorney")
  review_mn_powers_of_attorney
  nav.set_section("mn_powers_of_attorney_download")
  mn_powers_of_attorney_download
---
comment: |
  This question is used to introduce your interview. Please customize
id: Powers_of_Attorney
continue button field: mn_powers_of_attorney_intro
question: |
  Powers of Attorney
subquestion: |
  This interview will help you give powers of attorney to a trusted person. This person can make the decisions for you about your finances that you pick. In Minnesota, this person will be called your "attorney in fact."
  
  Before you get started, you should gather:
  
  1. The name and address of the person or people you trust and want to give power over your finances.
  1. The _legal description_ of any property you want to give the person you trust authority over.
  
  The interview will help you decide which powers to give to your "attorney-in-fact."
  
  When you are finished, you will need to:
  
  1. Sign the powers of attorney form in front of a notary.
  1. Give copies of the powers of attorney form to the person you are giving power and to the bank or anywhere else you want the person to be allowed to make decisions for you.
  
  Most people take about 20 minutes to finish this interview.
---
id: can i get a power of attorney
question: |
  Can you give a powers of attorney?
subquestion: |
  You can use this form to give power over your own decision making,
  or a helper can fill it in for the person who is giving power over their
  decision making.

  This question is about the person who is giving the power over their decision
  making, regardless of who is using this website.

  Is the person **giving** power to someone else:
fields:
  - Living in Minnesota?: grantor_lives_in_minnesota
    datatype: yesnoradio
  - Over 18?: grantor_over_18
    datatype: yesnoradio
  - Able to make their own decisions about **giving** power to someone else?: grantor_competent
    datatype: yesnoradio
---
id: exit cannot get poa
event: exit_cant_get_poa
decoration: hand
question: |
  You cannot get a power of attorney
subquestion: |
  Before anyone can use this interview to get a powers of attorney form,
  the person giving power over their decision making must be:

  1. Living in Minnesota
  1. Over 18, and
  1. Able to make the decision about giving power to someone else right now (competent)

  % if not grantor_lives_in_minnesota:
  You said the person giving
  power over their decision making does not live in Minnesota.

  % endif
  % if (not grantor_over_18) and (not grantor_competent):
  You said that the person giving power over their decision making is both under the age of 18
  and not competent to make this decision.
  % elif not grantor_over_18:
  You said the person giving power is not over 18.
  % elif not grantor_competent:
  You said the person giving power is not competent to make this decision.
  % endif

  You cannot use this website to complete a powers of attorney form.
  You may want to read about [other legal options](https://www.lawhelpmn.org/self-help-library/planning-ahead-elder-law)
  on the Law Help Minnesota website.
buttons:
  - Leave: exit
    url: https://www.lawhelpmn.org/self-help-library/planning-ahead-elder-law
---
id: who answering
question: |
  Are you the person who will be **giving** power over your own decision making?
fields:
  - I am: person_answering
    datatype: radio
    choices:
      - The person **giving** power over my decisions: myself
      - Someone else, like an attorney or helper: drafter
  - note: |
      **OK**, write **your own** name and address below. On the next screen, we will
      ask for the name of the person you are helping.
    show if:
      variable: person_answering
      is: drafter
  - code: |
      drafter.name_fields(show_if={"variable": "person_answering", "is": "drafter"})
  - code: |
      drafter.address_fields(show_if={"variable": "person_answering", "is": "drafter"})
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question:  |
  % if person_answering == "drafter":
  What is the name of the person you are helping?
  % else:
  What is your name?
  % endif
fields:
  - code: |
      users[0].name_fields()
---
id: your address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.unit
  - users[0].address.state
  - users[0].address.country
question: |
  % if person_answering == "drafter":
  What is the permanent address of the person you are helping?
  % else:
  What is your permanent address?
  % endif
fields:
  - code: |
      users[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE)
validation code: |
  if not users[0].address.state == "MN":
    validation_error("The power of attorney must be for someone who lives in Minnesota", field="users[0].address.state")
---
id: decision maker signpost
continue button field: decision_maker_signpost
question: |
  About the decision makers you can name
subquestion: |
  You can name two kinds of financial decision makers on this website:

  1. People who can make decisions for you now. This kind of person is called
     an attorneys in fact. And,
  1. People who can only make decisions for you if the first people
     are no longer able to do so, called successors.

  You can also decide if the people who make decisions for you need to
  agree on each decision before they make it or if they can act on their own.

  If you are planning to name more than one person on this website,
  take a minute to decide what job each person will have. Do you want
  them to make financial decisions right away, or only if the first choice
  decision maker cannot?

  We will explain more about each kind of decision maker when we ask
  for their names.
---
id: name of the first attorney in fact
sets:
  - attorneys[0].name.first
  - attorneys[0].name.last
  - attorneys[0].name.middle
  - attorneys[0].name.suffix
question: |
  % if person_answering == "drafter":
  Who will ${ users[0] } give power over their financial decisions right now?
  % else:
  Who do you want to give power over your financial decisions right now?
  % endif
subquestion: |
  The person that you name is called an "attorney-in-fact" in Minnesota.
  
  We will ask you later if you want to name more than one person.

  You can name more than one person who will make decisions for you now. You can also
  name backup decision makers who will only make decisions if the other person or
  people are no longer able to.
fields:
  - code: |
      attorneys[0].name_fields()
  - An existing address: attorneys[0].address
    datatype: object_radio
    choices: |
      [users[0].address]
    none of the above: A new address      
  - code: |
      attorneys[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_if={"variable": "attorneys[0].address", "is": None})
---
id: another attorney in fact
question: |
  Do you want to name another decision maker?
subquestion: |
  So far you have named ${ attorneys.complete_elements() }
fields:
  - no label: attorneys.there_is_another
    datatype: yesnoradio
---
id: name of the nth attorney in fact
sets:
  - attorneys[i].name.first
  - attorneys[i].name.last
  - attorneys[i].name.middle
  - attorneys[i].name.suffix
question: |
  % if person_answering == "drafter":
  Who else do you want to name who can make decisions for ${ users.familiar() } right now?
  % else:
  Who else do you want to give power to make financial decisions for you right now?
  % endif
subquestion: |
  So far you have named ${ attorneys.complete_elements() }
fields:
  - code: |
      attorneys[i].name_fields()
  - An existing address: attorneys[i].address
    datatype: object_radio
    choices: |
      [users[0].address] + [attorney.address for attorney in attorneys.complete_elements()]
    none of the above: A new address      
  - code: |
      attorneys[i].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_if={"variable": "attorneys[i].address", "is": None})
---
id: any successors
question: |
  Do you want to name any **backup** decision makers?
subquestion: |
  % if attorneys.number() > 1:
  The people you name as **backup**, or **successor**
  will only be able to make decisions if ${ attorneys.familiar() } are not able to.
  % else:
  The people you name as **backup**, or **successor**
  will only be able to make decisions if ${ attorneys.familiar() } is not able to.
  % endif

  Most people name at least one backup decision maker.
fields:
  - Name backup decision makers?: successor_attorneys.there_are_any
    datatype: yesnoradio
---
id: name of the first successor attorney in fact
sets:
  - successor_attorneys[0].name.first
  - successor_attorneys[0].name.last
  - successor_attorneys[0].name.middle
  - successor_attorneys[0].name.suffix
question: |
  % if person_answering == "drafter":
  Who will ${ users[0] } name as the first backup decision maker?
  % else:
  Who do you want to name as the first backup decision maker?
  % endif
subquestion: |
  The person that you name is called a "successor attorney-in-fact" in Minnesota.
  
  They will only be able to make decisions if ${ attorneys.familiar() } can no 
  longer do so.

  We will ask you later if you want to name more than one person.
fields:
  - code: |
      successor_attorneys[0].name_fields()
  - An existing address: successor_attorneys[0].address
    datatype: object_radio
    choices: |
      [users[0].address]
    none of the above: A new address      
  - code: |
      successor_attorneys[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_if={"variable": "successor_attorneys[0].address", "is": None})
---
id: another successor attorney in fact
question: |
  Do you want to add another **backup** decision maker?
subquestion: |
  So far you have listed ${ successor_attorneys.complete_elements() }
fields:
  - no label: successor_attorneys.there_is_another
    datatype: yesnoradio
---
id: name of the nth successor attorney in fact
sets:
  - successor_attorneys[i].name.first
  - successor_attorneys[i].name.last
  - successor_attorneys[i].name.middle
  - successor_attorneys[i].name.suffix
question: |
  % if person_answering == "drafter":
  Who else do you want to add as a backup decision maker?
  % else:
  Who else do you want to add as a backup decision maker?
  % endif
subquestion: |
  So far you have named ${ successor_attorneys.complete_elements() }
fields:
  - code: |
      successor_attorneys[i].name_fields()
  - An existing address: successor_attorneys[i].address
    datatype: object_radio
    choices: |
      [users[0].address] + [attorney.address for attorney in successor_attorneys.complete_elements()]
    none of the above: A new address      
  - code: |
      successor_attorneys[i].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_if={"variable": "successor_attorneys[i].address", "is": None})

---
id: How long do you want the power of attorney to last
question: |
  How long do you want the power of attorney to last?
fields:
  - How long will the power of attorney last?: expiration_choice
    datatype: radio
    choices:
      - Limited time: limited time
      - Never expires: unlimited time
  - "The power of attorney expires on": poa_expiration_date
    datatype: ThreePartsDate
    show if:
      variable: expiration_choice
      is: "limited time"
  - "The power of attorney should continue if I am incapacitated": is_durable_poa
    datatype: yesno
---
id: independent authority
question: |
  % if person_answering == "drafter":
  Will each named person be able to make decisions for ${ users.familiar() }
  at the same time?
  % else:
  Will each named person be able to make decisions for you at the same time?
  % endif
subquestion: |
  % if person_answering == "drafter":
  If you make the decision making **independent** then each named person can
  make decisions for ${ users.familiar() } right now.
  
  The default is that ${ attorneys[0] } will be able to make decisions for ${ users.familiar() }
  right away and ${ comma_and_list(attorneys[1:]) } will only be able to make decisions
  for ${ users.familiar() } if ${ attorneys[0] } cannot.
  % else:
  If you make the decision making **independent** then each named person can
  make decisions for you right now.
  
  The default is that ${ attorneys[0] } will be able to make decisions for you
  right away and ${ comma_and_list(attorneys[1:]) } will only be able to make decisions
  for you if ${ attorneys[0] } cannot.
  % endif
fields:
  - I want: aif_acts_independently  
    datatype: radio
    choices:
      - Only ${ attorneys[0] } to make decisions for ${ users.familiar() if person_answering == "drafter" else "me" }, unless they are unable to: False
      - ${ attorneys } to all be able to make decisions for ${ users.familiar() if person_answering == "drafter" else "me" } right away: True
---
depends on: expiration_choice
code: |
  poa_expires = expiration_choice == "limited time"
---
id: What can the power of attorney decide for you
question: |
  % if person_answering == "drafter":
  What can the people you name decide for ${ users.familiar() }?
  % else:
  What can the people you name decide for you?
  % endif
subquestion: |
  The attorneys-in-fact that I name will be able to make decisions about: (click the :circle-question: icon to learn more)
fields:
  - "Real estate": power_real_estate
    datatype: yesnoradio
    help: |
      If you grant this power, ${ attorneys.familiar() } will be able to enter
      into all kinds of real estate transactions in your name.
      
      This includes the power to buy, sell, lease, change and manage property, 
      as well as "any other act with respect to any estate or interest in 
      real property."
      
      You can limit this power to specific properties in Minnesota.
  - Limit to specific properties: real_estate_limited
    datatype: yesno
    show if: power_real_estate
    help: |
      If you choose "yes" we will ask about the specific properties later.
  - "Lawsuits and legal claims": power_claims
    datatype: yesnoradio
    help: |

  - "Bond, share and commodity transactions": power_bond_share_commodity
    datatype: yesnoradio
  - "Buy or change insurance": power_insurance
    datatype: yesnoradio
  - "Beneficiary transactions": power_beneficiaries
    datatype: yesnoradio
  - "Records, reports and statements": power_records
    datatype: yesnoradio
  - "Military benefits": power_military_benefits
    datatype: yesnoradio
  - "Fiduciary transactions": power_fiduciary
    datatype: yesnoradio
  - "Buy and sell my personal property": power_tangible_property
    datatype: yesnoradio
    help: |
      "Tangible" property is any property that you can touch - not counting 
      real estate like buildings and land. 
      
      For example, a car is tangible, while stocks, bonds and copyrights are not.
      
      If you grant this power, ${ attorneys.familiar() } will be able to enter into
      all kinds of transactions regarding your tangible personal property.
      This includes the power to buy, sell, lease, change and manage property, as well 
      as "any other acts with respect to any tangible personal property or interest 
      in any tangible personal property."
  - "Help run my business": power_business
    datatype: yesnoradio
  #- "Grant all powers above": power_all_above
  #  datatype: yesno
  - "Gift transactions": power_gifts
    datatype: yesnoradio
  - "Control over my bank accounts": power_banking
    datatype: yesnoradio
  - "Provide for my family": power_family
    datatype: yesnoradio
continue button field: What_can_the_power_of_attorney_decide_for_you
---
id: What limits will the power of attorney have
question: |
  What limits will the power of attorney have?
fields:
  - The attorney-in-fact cannot make gifts to themself: authority_gift_to_self
    datatype: noyes
  - The attorney-in-fact must tell me regularly how they spend my money and make decisions for me : attorney_must_provide_accounting
    datatype: yesno
continue button field: What_limits_will_the_power_of_attorney_have
---
code: |
  real_estate_items.there_are_any = power_real_estate and real_estate_limited
---
id: describe real estate
list collect: True
question: |
  What individual properties will the power of attorney be limited to?
subject: |
  Name the county where the property is and the **legal description** of the property  

  You can find the legal description on the property deed. Do not use the description 
  on your real estate tax statement. It should look something like this:

  >  "LOT 10 BLOCK 240 AND N. 30 FT OF LOT
  >  11 BLOCK 240 COUNTY ..."

fields:
  - County: real_estate_items[i].county
    choices:
      - Aitkin
      - Anoka
      - Becker
      - Beltrami
      - Benton
      - Big Stone
      - Blue Earth
      - Brown
      - Carlton
      - Carver
      - Cass
      - Chippewa
      - Chisago
      - Clay
      - Clearwater
      - Cook
      - Cottonwood
      - Crow Wing
      - Dakota
      - Dodge
      - Douglas
      - Faribault
      - Fillmore
      - Freeborn
      - Goodhue
      - Grant
      - Hennepin
      - Houston
      - Hubbard
      - Isanti
      - Itasca
      - Jackson
      - Kanabec
      - Kandiyohi
      - Kittson
      - Koochiching
      - Lac qui Parle
      - Lake
      - Lake of the Woods
      - Le Sueur
      - Lincoln
      - Lyon
      - Mahnomen
      - Marshall
      - Martin
      - McLeod
      - Meeker
      - Mille Lacs
      - Morrison
      - Mower
      - Murray
      - Nicollet
      - Nobles
      - Norman
      - Olmsted
      - Otter Tail
      - Pennington
      - Pine
      - Pipestone
      - Polk
      - Pope
      - Ramsey
      - Red Lake
      - Redwood
      - Renville
      - Rice
      - Rock
      - Roseau
      - Scott
      - Sherburne
      - Sibley
      - St. Louis
      - Stearns
      - Steele
      - Stevens
      - Swift
      - Todd
      - Traverse
      - Wabasha
      - Wadena
      - Waseca
      - Washington
      - Watonwan
      - Wilkin
      - Winona
      - Wright
      - Yellow Medicine
  - Description of lot: real_estate_items[i].description
    datatype: area
    rows: 2
    help: |
      Like: _LOT 10 BLOCK 240 AND N. 30 FT OF LOT 11 BLOCK 240 COUNTY ..._
---
table: real_estate_items.table
rows: real_estate_items
columns:
  - County: |
      row_item.county
  - Description: |
      single_paragraph(row_item.description)
edit:
  - county
---
code: |
  signature_fields = []
---
need:
  - real_estate_items.table
id: mn powers of attorney review screen
continue button field: review_mn_powers_of_attorney
question: |
  Review your answers
review:
  - Edit: users.revisit
    button: |
      **Name of person giving power**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: attorneys.revisit
    button: |
      **Decision makers**

      % for item in attorneys:
        * ${ item }
      % endfor
  - Edit: successor_attorneys.revisit
    button: |
      **Backup decision makers**

      % for item in successor_attorneys:
        * ${ item }
      % endfor
  - Edit: 
      - power_real_estate
      - recompute:
        - real_estate_items.there_are_any
    button: |
      **${ attorneys.familiar() } can make decisions about:**

      * Real estate: ${ yesno( power_real_estate ) }
      % if real_estate_limited:
            * Decision making over real estate is limited to these properties:
      
      ${ real_estate_items.table }

      ${ real_estate_items.add_action() }

      % endif
      * Lawsuits and legal claims: ${ yesno( power_claims ) }
      * Bond, share and commodity transactions: ${ yesno( power_bond_share_commodity ) }
      * Buy or change insurance: ${ yesno( power_insurance ) }
      * Beneficiary transactions: ${ yesno( power_beneficiaries ) }
      * Records, reports and statements: ${ yesno( power_records ) }
      * Military benefits: ${ yesno( power_military_benefits ) }
      * Fiduciary transactions: ${ yesno( power_fiduciary ) }
      * Buy and sell my personal property: ${ yesno( power_tangible_property ) }
      * Help run my business: ${ yesno( power_business ) }
      * Gift transactions: ${ yesno( power_gifts ) }
      * Control over my bank accounts: ${ yesno( power_banking ) }
      * Provide for my family: ${ yesno( power_family ) }
  - Edit: authority_gift_to_self
    button: |
      **Make gifts to themself**:
      ${ authority_gift_to_self }
  - Edit: attorney_must_provide_accounting
    button: |
      **Attorney must provide accounting**:
      ${ attorney_must_provide_accounting }
  - Edit: poa_expiration_date
    button: |
      **The power of attorney expires on**:
      ${ poa_expiration_date }
  - Edit: power_all_above
    button: |
      **Grant all powers above**:
      ${ word(yesno(power_all_above)) }
  - Edit: poa_expires
    button: |
      **The power of attorney is for a limited time**:
      ${ word(yesno(poa_expires)) }
  - Edit: is_durable_poa
    button: |
      **The power of attorney should continue if I am incapacitated**:
      ${ word(yesno(is_durable_poa)) }
  - Edit: aif_acts_independently
    button: |
      **Each attorney in fact can act at the same time**:
      ${ word(yesno(aif_acts_independently)) }
---
continue button field: attorneys.revisit
question: |
  Edit decision makers
subquestion: |
  ${ attorneys.table }

  ${ attorneys.add_action() }
---
table: attorneys.table
rows: attorneys
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
edit:
  - name.first
  - address.address
confirm: True
---
continue button field: successor_attorneys.revisit
question: |
  Edit backup decision makers
subquestion: |
  ${ successor_attorneys.table }

  ${ successor_attorneys.add_action() }
---
table: successor_attorneys.table
rows: successor_attorneys
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
edit:
  - name.first
  - address.address
confirm: True

---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - address.address
  - name.first
confirm: True

---
id: download mn_powers_of_attorney
event: mn_powers_of_attorney_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_mn_powers_of_attorney'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  #- mn_powers_of_attorney_Post_interview_instructions: ALDocument.using(title="Instructions", filename="mn_powers_of_attorney_next_steps.docx", enabled=True, has_addendum=False)
  - mn_powers_of_attorney_attachment: ALDocument.using(title="Powers of Attorney", filename="mn_powers_of_attorney", enabled=True, has_addendum=False, )
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[mn_powers_of_attorney_attachment], filename="mn_powers_of_attorney", title="All forms to download for your records", enabled=True)
  - al_recipient_bundle: ALDocumentBundle.using(elements=[mn_powers_of_attorney_attachment],  filename="mn_powers_of_attorney", title="All forms to file", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
#attachment:
#  name: Post-interview-Instructions
#  filename: mn_powers_of_attorney_next_steps
#  docx template file: mn_powers_of_attorney_next_steps.docx
#  variable name: mn_powers_of_attorney_Post_interview_instructions[i]
#  skip undefined: True
---
attachment:
  name: mn powers of attorney
  filename: Minnesota Powers of Attorney
  variable name: mn_powers_of_attorney_attachment[i]
  skip undefined: True
  docx template file: mn_powers_of_attorney.docx



